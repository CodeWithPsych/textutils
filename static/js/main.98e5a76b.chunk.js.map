{"version":3,"sources":["components/Navbar.js","components/textForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","About","htmlFor","onClick","toggleMode","role","TextForm","words","setWords","useState","chars","setChars","text","setText","style","color","value","onChange","event","newText","target","newWordCount","trim","split","filter","word","length","newCharCount","replace","backgroundColor","caretColor","cursor","rows","handleUpClick","toUpperCase","handleUpClickFirstWord","map","charAt","slice","toLowerCase","join","handleUpClickFirstWordLine","sentences","i","undefined","handleLowClick","removeSpaces","copyText","textArea","document","getElementById","select","navigator","clipboard","writeText","showalert","clearText","Alert","alert","lower","capitalized","msg","propTypes","PropTypes","string","defaultProps","App","setMode","setAlert","showAlert","message","setTimeout","Fragment","body","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.98e5a76b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <div>\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"/\">{props.About}</a>\r\n              </li>\r\n\r\n            </ul>\r\n            {/* <form className=\"d-flex\" role=\"search\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n              <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n            </form> */}\r\n            <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n              <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n}","import React, { useState } from 'react';\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const [words, setWords] = useState(0);\r\n    const [chars, setChars] = useState(0);\r\n    const [text, setText] = useState('');\r\n\r\n    const handleOnChange = (event) => {\r\n        const newText = event.target.value;\r\n        setText(newText);\r\n\r\n        // Count non-empty words\r\n        const newWordCount = newText.trim().split(/\\s+/).filter(word => word !== '').length;\r\n\r\n        // Count characters excluding spaces\r\n        const newCharCount = newText.replace(/\\s/g, '').length;\r\n\r\n        setWords(newWordCount);\r\n        setChars(newCharCount);\r\n    };\r\n\r\n    const handleUpClick = () => {\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n    };\r\n\r\n    const handleLowClick = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n    };\r\n\r\n    const clearText = () => {\r\n        let newText = '';\r\n        setText(newText);\r\n    };\r\n\r\n    const removeSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(' '));\r\n    };\r\n\r\n    const copyText = () => {\r\n        let textArea = document.getElementById('Textarea');\r\n        textArea.select();\r\n        navigator.clipboard.writeText(textArea.value);\r\n        props.showalert(\"The text is copied to ClipBoard\",\"success\");\r\n    };\r\n\r\n    const handleUpClickFirstWord = () => {\r\n        let words = text.split(/\\s+/);\r\n\r\n        let capitalizedWords = words.map(word => {\r\n            if (word.length > 0) {\r\n                return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\r\n            } else {\r\n                return word;\r\n            }\r\n        });\r\n\r\n        let newText = capitalizedWords.join(' ');\r\n        setText(newText);\r\n    };\r\n\r\n    const handleUpClickFirstWordLine = () => {\r\n        let sentences = text.split(/([.?!]\\s*)/);\r\n\r\n        for (let i = 0; i < sentences.length; i++) {\r\n            if (sentences[i] !== undefined && sentences[i] !== null && sentences[i] !== \"\") {\r\n                sentences[i] = sentences[i].charAt(0).toUpperCase() + sentences[i].slice(1);\r\n            }\r\n        }\r\n\r\n        let newText = sentences.join('');\r\n        setText(newText);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"container\" style={{\r\n                color: props.mode === 'light' ? 'black' : 'white',\r\n            }}>\r\n                <h1 className=\"my-4\">{props.text}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea\r\n                        className=\"form-control\"\r\n                        value={text}\r\n                        onChange={handleOnChange}\r\n                        style={{\r\n                            color: props.mode === 'dark' ? 'white' : 'black',\r\n                            backgroundColor: props.mode === 'dark' ? 'gray' : 'white',\r\n                            caretColor: props.mode === 'dark' ? 'white' : 'black',\r\n                            cursor: 'pointer',\r\n                        }}\r\n                        id=\"Textarea\"\r\n                        rows=\"8\"\r\n                    ></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary mx-1 my-1\" onClick={handleUpClick}>\r\n                    Convert to UpperCase\r\n                </button>\r\n                <button className=\"btn btn-primary mx-1 my-1\" onClick={handleUpClickFirstWord}>\r\n                    Capitalize Each First Word\r\n                </button>\r\n                <button className=\"btn btn-primary mx-1 my-1\" onClick={handleUpClickFirstWordLine}>\r\n                    Capitalize First Word of New Line\r\n                </button>\r\n                <button className=\"btn btn-primary mx-1 my-1\" onClick={handleLowClick}>\r\n                    Convert to LowerCase\r\n                </button>\r\n                <button className=\"btn btn-primary mx-1 my-1\" onClick={removeSpaces}>\r\n                    Remove Extra Spaces\r\n                </button>\r\n                <button className=\"btn btn-primary mx-1 my-1\" onClick={copyText}>\r\n                    Copy Text\r\n                </button>\r\n                <button className=\"btn btn-primary mx-1 my-1\" onClick={clearText}>\r\n                    Clear Text\r\n                </button>\r\n                <h2 className=\"my-2\">Your text summary</h2>\r\n                <p style={{\r\n                    color: props.mode === 'light' ? 'black' : 'red',\r\n                }}>\r\n                    {text.trim().length === 0 ? '0 words and 0 characters' : `${words} words and ${chars} characters`}\r\n                </p>\r\n\r\n                <h2 className=\"my-1\">Preview</h2>\r\n                <p>{text === \"\" ? \"Enter some content and it will show here\" : text}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React from 'react';\r\n\r\nexport default function Alert(props) {\r\n    const capitalized = (word) => {\r\n        if (word) {\r\n            const lower = word.toLowerCase();\r\n            return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n        } else {\r\n            return '';\r\n        }\r\n    };\r\n\r\n    return (\r\n        // Check if props.alert is defined before accessing its properties\r\n        props.alert && (\r\n            <div className={`alert alert-${props.alert.type}`} role=\"alert\">\r\n                <strong>{capitalized(props.alert.type)}</strong>: {props.alert.msg}\r\n            </div>\r\n        )\r\n    );\r\n}\r\n","import './App.css';\nimport PropTypes from 'prop-types';\n\nimport Navbar from './components/Navbar.js';\n// import About from './components/About.js';\nimport TextForm from './components/textForm.js';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert.js';\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\nconst showAlert=(message,type)=>{\n     setAlert({\n      msg: message,\n      type: type,\n     })\n     setTimeout(() => {\n      setAlert(null)\n     }, 1500);\n}\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#000455';\n      showAlert(\"Dark mode is Enable\",\"success\")\n    } else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode is Enable\",\"success\")\n    }\n  };\n\n  return (\n    <>\n      <Navbar title='TextUtils' About='About TextUtils'  mode={mode} toggleMode={toggleMode} />\n      <Alert  alert={alert}/>\n      {/* <Navbar /> */}\n      <TextForm showalert={showAlert} text='Enter your text Here' mode={mode} />\n      {/* <About/> */}\n    </>\n  );\n}\n\nNavbar.propTypes = {\n  title: PropTypes.string,\n  About: PropTypes.string\n}\nNavbar.defaultProps = {\n  title: 'Set Title',\n  About: 'here is about'\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}